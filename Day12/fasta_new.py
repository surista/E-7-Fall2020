#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
S. Urista
Nov 2020
Module documentation goes here
"""
# def read_fasta_file(filename: str) -> str:
#     with open(filename, 'r') as f:
#         temp = [line.strip() for line in f]
#
#     seq = ''.join(temp[1:])
#
#     return seq
#
#
#     sol = []
#     lst = [seq[i:]for i in range(len(seq), -1, -1)]
#     for item in lst:
#         sol.append((item, (lst.index(item))))
#
#     sol = sorted(sol)
#
#     for item in sol:
#         print(item)
#
#     for item
#
#
#     suf_array = []
#     for item in sol:
#         suf_array.append(item[1])
#
#
#     sol = set()
#     n = len(seq)
#     result = 0
#     for y in range(n):
#         for x in range(n+1):
#             sub_seq = seq[x:y+1]
#
#             if sub_seq not in sol:
#                 sol.add(sub_seq)
#             else:
#                 result = max(result, len(sub_seq))
#
#     return seq

# filename = 'pACYC184_short.fasta'
# read_fasta_file(filename)
from collections import defaultdict

text = \
    """
    AAGCTTGCCACCATGAAAACTGAAGAAGGTAAACTGGTAATCTGGATTAACGGCGATAAAGGCTATAACGGTCTCGCTGA
AGTCGGTAAGAAATTCGAGAAAGATACCGGAATTAAAGTCACCGTTGAGCATCCGGATAAACTGGAAGAGAAATTCCCAC
AGGTTGCGGCAACTGGCGATGGCCCTGACATTATCTTCTGGGCACACGACCGCTTTGGTGGCTACGCTCAATCTGGCCTG
TTGGCTGAAATCACCCCGGACAAAGCGTTCCAGGACAAGCTGTATCCGTTTACCTGGGATGCCGTACGTTACAACGGCAA
GCTGATTGCTTACCCGATCGCTGTTGAAGCGTTATCGCTGATTTATAACAAAGATCTGCTGCCGAACCCGCCAAAAACCT
GGGAAGAGATCCCGGCGCTGGATAAAGAACTGAAAGCGAAAGGTAAGAGCGCGCTGATGTTCAACCTGCAAGAACCGTAC
TTCACCTGGCCGCTGATTGCTGCTGACGGGGGTTATGCGTTCAAGTATGAAAACGGCAAGTACGACATTAAAGACGTGGG
CGTGGATAACGCTGGCGCGAAAGCGGGTCTGACCTTCCTGGTTGACCTGATTAAAAACAAACACATGAATGCAGACACCG
ATTACTCCATCGCAGAAGCTGCCTTTAATAAAGGCGAAACAGCGATGACCATCAACGGCCCGTGGGCATGGTCCAACATC
GACACCAGCAAAGTGAATTATGGTGTAACGGTACTGCCGACCTTCAAGGGTCAACCATCCAAACCGTTCGTTGGCGTGCT
GAGCGCAGGTATTAACGCCGCCAGTCCGAACAAAGAGCTGGCAAAAGAGTTCCTCGAAAACTATCTGCTGACTGATGAAG
GTCTGGAAGCGGTTAATAAAGACAAACCGCTGGGTGCCGTAGCGCTGAAGTCTTACGAGGAAGAGTTGGCGAAAGATCCA
CGTATTGCCGCCACTATGGAAAACGCCCAGAAAGGTGAAATCATGCCGAACATCCCGCAGATGTCCGCTTTCTGGTATGC
CGTGCGTACTGCGGTGATCAACGCCGCCAGCGGTCGTCAGACTGTCGATGAAGCCCTGAAAGACGCGCAGACTAATTCGA
GCTCGATCGAGGGAAGGCTCGAGAAAAGAGAGGCTGAAGCTAGAAGAGCTCATATGTCCATGGGCGGCCGCGATATCGTC
GACGGATCCGAATTCCCTGCAGGTAATTAAATAAAGGCCTTGAATCGAGAATTTATACTTAGATAAGTATGTACTTACAG
GTATATTTCTATGAGATACTGATGTATACATGCATGATAATATTTAAACGGTTATTAGTGCCGATTGTCTTGTGCGATAA
TGACGTTCCTATCAAAGCAATACACTTACCACCTATTACATGGGCCAAGAAAATATTTTCGAACTTGTTTAGAATATTAG
CACAGAGTATATGATGTTATCCGTTAGATTATGCATGATTCATTCCTACAACTTTTTCGTAGCATAAGGATTAATTACTT
GGATGCCAATAAAAAAAAAAAACATCGAGAAAATTTCAGCATGCTCAGAAACAATTGCAGTGTATCAAAGTAAAAAAAAG
ATTTTCACTACATGTTCCTTTTGAAGAAAGAAAATCATGGAACATTAGATTTACAAAAATTTAACCACCGCTGATTAACG
ATTAGACCGTTAAGCGCACAACAGGTTATTAGTACAGAGAAAGCATTCTGTGGTGTTGCCCCGGACTTTCTTTTGCGACA
TAGGTAAATCGAATACCATCATACTATCTTTTCCAATGACTCCCTAAAGAAAGACTCTTCTTCGATGTTGTATACGTTGG
AGCATAGGGCAAGAATTGTGGCTTGAGATCATCCTTTTGTTGTTTCCGGGTGTACAATATGGACTTCCTCTTTTCTGGCA
ACCAAACCCATACATCGGGATTCCTATAATACCTTCGTTGGTCTCCCTAACATGTAGGTGGCGGAGGGGAGATATACAAT
AGAACAGATACCAGACAAGACATAATGGGCTAAACAAGACTACACCAATTACACTGCCTCATTGATGGTGGTACATAACG
AACTAATACTGTAGCCCTAGACTTGATAGCCATCATCATATCGAAGTTTCACTACCCTTTTTCCATTTGCCATCTATTGA
AGTAATAATAGGCGCATGCAACTTCTTTTCTTTTTTTTTCTTTTCTCTCTCCCCCGTTGTTGTCTCACCATATCCGCAAT
GACAAAAAAATGATGGAAGACACTAAAGGAAAAAATTAACGACAAAGACAGCACCAACAGATGTCGTTGTTCCAGAGCTG
ATGAGGGGTATCTCGAAGCACACGAAACTTTTTCCTTCCTTCATTCACGCACACTACTCTCTAATGAGCAACGGTATACG
GCCTTCCTTCCAGTTACTTGAATTTGAAATAAAAAAAAGTTTGCTGTCTTGCTATCAAGTATAAATAGACCTGCAATTAT
TAATCTTTTGTTTCCTCGTCATTGTTCTCGTTCCCTTTCTTCCTTGTTTCTTTTTCTGCACAATATTTCAAGCTATACCA
AGCATACAATCAAGCAATTCCAGATCTGCCACCATGCCTCAATCCTGGGAAGAACTGGCCGCTGATAAGCGCGCCCGCCT
CGCAAAAACCATCCCTGATGAATGGAAAGTCCAGACGCTGCCTGCGGAAGACAGCGTTATTGATTTCCCAAAGAAATCGG
GCATCCTTTCAGAGGCCGAACTGAAGATCACAGAGGCTTCCGCTGCGGATCTTGTGTCCAAGCTGGCGGCCGGAGAGTTG
ACCTCGGTGGAAGTTACGCTAGCATTCTGTAAACGGGCAGCAATCGCCCAGCAGTTAACAAACTGCGCCCACGAGTTCTT
CCCTGACGCCGCTCTCGCGCAGGCAAGGGAACTCGATGAATACTACGCAAAGCACAAGAGACCCGTTGGTCCACTTCATG
GCCTCCCCATCTCTCTCAAAGACCAGCTTCGAGTCAAGGGCTACGAAACATCAATGGGCTACATCTCATGGCTAAACAAG
TACGACGAAGGGGACTCGGTTCTGACAACCATGCTCCGCAAAGCCGGTGCCGTCTTCTACGTCAAGACCTCTGTCCCGCA
GACCCTGATGGTCTGCGAGACAGTCAACAACATCATCGGGCGCACCGTCAACCCACGCAACAAGAACTGGTCGTGCGGCG
GCAGTTCTGGTGGTGAGGGTGCGATCGTTGGGATTCGTGGTGGCGTCATCGGTGTAGGAACGGACATCGGTGGCTCGATT
CGAGTGCCGGCCGCGTTCAACTTCCTGTACGGTCTAAGGCCGAGTCATGGGCGGCTGCCGTATGCAAAGATGGCGAACAG
CATGGAGGGTCAGGAGACGGTGCACAGCGTTGTCGGGCCGATTACGCACTCTGTTGAGGACCTCCGCCTCTTCACCAAAT
CCGTCCTCGGTCAGGAGCCTTGGAAATACGACTCCAAGGTCATCCCCATGCCCTGGCGCCAGTCCGAGTCGGACATTATT
GCCTCCAAGATCAAGAACGGCGGGCTCAATATCGGCTACTACAACTTCGACGGCAATGTCCTTCCACACCCTCCTATCCT
GCGCGGCGTGGAAACTACCGTCGCCGCACTCGCCAAAGCCGGTCACACCGTGACCCCGTGGACGCCATACAAGCACGATT


"""



def longest_repeat(text):

    d = defaultdict(list)
    for i in range(len(text)):
        for y in range(len(text)):
            d[text[i:y]].append(i)

    max = 0
    sol = (0,0)
    for k, v in d.items():
        if len(k) > 1 and len(v) > 1:
            if len(k) > max:
                max = len(k)
                sol = v, max

    return sol

gen = longest_repeat(text)
print(gen)